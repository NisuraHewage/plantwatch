# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ogservice
# app and org for use with dashboard.serverless.com
app: plantwatch
org: nishad

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource: ${param:DYNAMODB_READINGS_ARN}
  httpApi:
      cors: true
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  viewReadings:
    handler: src/functions/viewReadings.viewReadings
    events:
      - http:
          path: /v1/readings
          method: get
  addPlant:
    handler: src/functions/addPlant.addPlant
    events:
      - http:
          path: /v1/plants
          method: post
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  addPlantProfile:
    handler: src/functions/addPlantProfile.addPlantProfile
    events:
      - http:
          path: /v1/plantprofiles
          method: post
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  addDevice:
    handler: src/functions/addDevice.addDevice
    events:
      - http:
          path: /v1/devices
          method: post
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  postReadings:
    handler: src/functions/postReadings.postReadings
    events:
      - http:
          path: /v1/readings
          method: post
  validateUser:
    handler: src/functions/validateUser.validateUser
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  loginUser:
    handler: src/functions/loginUser.loginUser
    events:
      - http:
          path: /v1/user/login
          method: post
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  createUser:
    handler: src/functions/createUser.createUser
    events:
      - http:
          path: /v1/user
          method: post
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-pseudo-parameters
  - serverless-mocha
  - serverless-apigw-binary

custom:
  serverless-mocha-plugin:
      testTemplate: src/templates/test-template.ejs
      functionTemplate: src/templates/function-template.ejs
  apigwBinary:
    types:
      - 'multipart/form-data'