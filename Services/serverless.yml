# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ogservice
# app and org for use with dashboard.serverless.com
app: plantwatch
org: nishad

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource:  ${param:DYNAMODB_READINGS_ARN}
        - Effect: 'Allow'
          Action:
            - 's3:*'
          Resource: ${param:S3_BUCKET_ARN}
  httpApi:
      cors: true
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  predictV2:
    handler: src/functions/predictV2.predictV2
  updateKnowledgebase:
    handler: src/functions/updateKnowledgebase.updateKnowledgebase
  deleteKnowledgebase:
    handler: src/functions/deleteKnowledgebase.deleteKnowledgebase
  readNotification:
    handler: src/functions/readNotification.readNotification
  deletePlant:
    handler: src/functions/deletePlant.deletePlant
  viewDiseaseResults:
    handler: src/functions/viewDiseaseResults.viewDiseaseResults
    events:
      - http:
          path: /v1/disease
          method: get
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
  sendNotification:
    handler: src/functions/sendNotification.sendNotification
    events:
      - http:
          path: /v1/notification/send
          method: post
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
  viewNotifications:
    handler: src/functions/viewNotifications.viewNotifications
    events:
      - http:
          path: /v1/notification
          method: get
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
  getPlants:
    handler: src/functions/getPlants.getPlants
    events:
      - http:
          path: /v1/plants
          method: get
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
  getDevices:
    handler: src/functions/getDevices.getDevices
    events:
      - http:
          path: /v1/devices
          method: get
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
      PUSH_FREQUENCY_MILLI_SECONDS: ${param:PUSH_FREQUENCY_MILLI_SECONDS}
  viewKnowledgeBase:
    handler: src/functions/viewKnowledgeBase.viewKnowledgeBase
    events:
      - http:
          path: /v1/knowledgebase/view
          method: get
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
  viewKnowledgeBases:
    handler: src/functions/viewKnowledgeBases.viewKnowledgeBases
    events:
      - http:
          path: /v1/knowledgebase
          method: get
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
  addKnowledgeBase:
    handler: src/functions/addKnowledgeBase.addKnowledgeBase
    events:
      - http:
          path: /v1/knowledgebase
          method: post
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
  predictDisease:
    handler: src/functions/predictDisease.predictDisease
    events:
      - http:
          path: /v1/predict
          method: post
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
  getParameters:
    handler: src/functions/getParameters.getParameters
    events:
      - http:
          path: /v1/parameters
          method: get
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  upsertParameters:
    handler: src/functions/upsertParameters.upsertParameters
    events:
      - http:
          path: /v1/parameters
          method: post
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  deleteProfile:
    handler: src/functions/deleteProfile.deleteProfile
    events:
      - http:
          path: /v1/profiles
          method: delete
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  updateProfile:
    handler: src/functions/updateProfile.updateProfile
    events:
      - http:
          path: /v1/profiles
          method: put
          cors: true 
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
  getProfile:
    handler: src/functions/getProfile.getProfile
    events:
      - http:
          path: /v1/profile
          method: get
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  getProfiles:
    handler: src/functions/getProfiles.getProfiles
    events:
      - http:
          path: /v1/profiles
          method: get
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  viewReadings:
    handler: src/functions/viewReadings.viewReadings
    events:
      - http:
          path: /v1/readings
          method: get
          authorizer: validateUser
  addPlant:
    handler: src/functions/addPlant.addPlant
    events:
      - http:
          path: /v1/plants
          method: post
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  addPlantProfile:
    handler: src/functions/addPlantProfile.addPlantProfile
    events:
      - http:
          path: /v1/plantprofiles
          method: post
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
  addDevice:
    handler: src/functions/addDevice.addDevice
    events:
      - http:
          path: /v1/devices
          method: post
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  postReadings:
    handler: src/functions/postReadings.postReadings
    events:
      - http:
          path: /v1/readings
          method: post
  validateUser:
    handler: src/functions/validateUser.validateUser
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
  loginUser:
    handler: src/functions/loginUser.loginUser
    events:
      - http:
          path: /v1/user/login
          method: post
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}
      SNS_PLATFORM_APPLICATION_ARN: ${param:SNS_PLATFORM_APPLICATION_ARN}
  createUser:
    handler: src/functions/createUser.createUser
    events:
      - http:
          path: /v1/user
          method: post
    environment:
      MYSQL_PASSWORD: ${param:MYSQL_PASSWORD}
      MYSQL_ENDPOINT: ${param:MYSQL_ENDPOINT}
      JWT_SECRET: ${param:JWT_SECRET}
      DYNAMO_DB_ACCESSKEY: ${param:DYNAMO_DB_ACCESSKEY}
      DYNAMO_DB_SECRETKEY: ${param:DYNAMO_DB_SECRETKEY}
      STORAGE_BUCKET: ${param:STORAGE_BUCKET}

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-pseudo-parameters
  - serverless-mocha
  - serverless-apigw-binary

custom:
  serverless-mocha-plugin:
      testTemplate: src/templates/test-template.ejs
      functionTemplate: src/templates/function-template.ejs
  apigwBinary:
    types:
      - 'multipart/form-data'